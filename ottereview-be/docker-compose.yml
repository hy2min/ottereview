services:
  db-mysql:
    image: mysql:8.0
    container_name: db-mysql
    restart: always
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - ./db:/var/lib/mysql
    command: [ '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci' ]
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - springboot-mysql-net

  redis:
    image: redis:7
    container_name: ottereview-redis
    ports:
      - "6379:6379"
    restart: always
    networks:
      - springboot-mysql-net

  openvidu-server:
    image: openvidu/openvidu-dev:2.31.0
    container_name: openvidu-server
    ports:
      - "4443:4443"
    environment:
      DOMAIN_OR_PUBLIC_IP: i13c108.p.ssafy.io
      OPENVIDU_SECRET: ${OPENVIDU_SECRET}
      CERTIFICATE_TYPE: letsencrypt
      LETSENCRYPT_EMAIL: sjw0066@naver.com
    volumes:
        - /etc/letsencrypt/live/i13c108.p.ssafy.io:/opt/openvidu/certificates:ro
        - /etc/letsencrypt/archive:/etc/letsencrypt/archive:ro
    networks:
      - springboot-mysql-net

  springboot-app:
    build: # ← 이 블록이 반드시 필요
      context: .                    # docker-compose.yml 과 Dockerfile 이 있는 폴더
      dockerfile: Dockerfile       # production용 Dockerfile
    image: kyoungil/ottereview
    container_name: springboot-app
    ports:
      - "8080:8080"
    depends_on:
      db-mysql:
        condition: service_healthy
    env_file:
      - ./.env               # Compose 파일이 있는 디렉터리에 복사된 .env
    environment:
        - SPRING_PROFILES_ACTIVE=docker
    restart: unless-stopped
    networks:
      - springboot-mysql-net

networks:
  springboot-mysql-net:
    driver: bridge
    external: true

