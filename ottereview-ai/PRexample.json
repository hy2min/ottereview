{
    "pr_id": 123,
    "source": "feature/user-management",
    "target": "main",
    "title": "Add user management feature",
    "body": "사용자 관리 기능 추가 - 코딩 컨벤션 테스트용 PR입니다.",
    "files": [
        {
            "filename": "UserService.js",
            "status": "added",
            "additions": 25,
            "deletions": 0,
            "patch": "class userManager {  // camelCase 클래스명 (PascalCase 필요)\n    constructor() {\n        this.user_data = {};  // snake_case 변수명 (camelCase 필요)\n        this.USER_COUNT = 0;  // 상수\n    }\n\n    get_user_info(user_id) {  // snake_case 메서드명 (camelCase 필요)\n        const USER_NAME = 'test';  // 상수\n        let current_user = null;  // snake_case 변수명 (camelCase 필요)\n        return current_user;\n    }\n\n    calculateUserScore() {  // 올바른 camelCase\n        return 100;\n    }\n}"
        },
        {
            "filename": "user-helper.py", 
            "status": "added",
            "additions": 20,
            "deletions": 0,
            "patch": "class UserProfile:  # 올바른 PascalCase\n    def __init__(self):\n        self.user_name = 'test'  # 올바른 snake_case\n        self.USER_ID = 123  # 올바른 CONSTANT_CASE\n\ndef getUserData():  # camelCase 함수명 (snake_case 필요)\n    userName = 'test'  # camelCase 변수명 (snake_case 필요)\n    return userName\n\ndef calculate_score():  # 올바른 snake_case\n    CONSTANT_VALUE = 100  # 올바른 상수\n    return CONSTANT_VALUE\n\nclass user_service:  # snake_case 클래스명 (PascalCase 필요)\n    pass"
        },
        {
            "filename": "UserDAO.java",
            "status": "modified", 
            "additions": 15,
            "deletions": 5,
            "patch": "public class UserDAO {  // 올바른 PascalCase\n    private static final String DB_URL = \"jdbc:mysql://localhost\";  // 올바른 CONSTANT_CASE\n    private String user_name;  // snake_case 변수명 (camelCase 필요)\n    \n    public void Get_User_Data(int userId) {  // Pascal_Snake_Case 메서드명 (camelCase 필요)\n        String current_user = null;  // snake_case 변수명 (camelCase 필요)\n        return;\n    }\n    \n    public String getUserName() {  // 올바른 camelCase\n        return this.userName;\n    }\n    \n    private void setUserData(String userName) {  // 올바른 camelCase\n        this.userName = userName;\n    }\n}"
        },
        {
            "filename": "api_helper.ts",
            "status": "added",
            "additions": 18,
            "deletions": 0,
            "patch": "interface UserData {  // 올바른 PascalCase\n    user_id: number;  // snake_case 속성명 (camelCase 필요)\n    user_name: string;  // snake_case 속성명 (camelCase 필요)\n}\n\nclass ApiHelper {  // 올바른 PascalCase\n    private API_BASE_URL = 'https://api.example.com';  // 올바른 상수\n    \n    async fetch_user_data(userId: number): Promise<UserData> {  // snake_case 메서드명 (camelCase 필요)\n        const response_data = await fetch(`${this.API_BASE_URL}/users/${userId}`);  // snake_case 변수명 (camelCase 필요)\n        return response_data.json();\n    }\n    \n    validateUserInput(userData: UserData): boolean {  // 올바른 camelCase\n        return userData.user_id > 0;\n    }\n}"
        }
    ],
    "commits": [
        {
            "sha": "abc123def456",
            "message": "feat: Add user management classes",
            "authorName": "Developer",
            "authorEmail": "dev@example.com", 
            "additions": 78,
            "deletions": 5
        },
        {
            "sha": "def789ghi012",
            "message": "fix: Update naming conventions",
            "authorName": "Developer",
            "authorEmail": "dev@example.com",
            "additions": 12,
            "deletions": 8
        }
    ],
    "reviewers": [
        {
            "githubUsername": "reviewer1",
            "githubEmail": "reviewer1@example.com"
        },
        {
            "githubUsername": "reviewer2", 
            "githubEmail": "reviewer2@example.com"
        }
    ],
    "reviews": [
        {
            "userGithubUsername": "reviewer1",
            "state": "REQUEST_CHANGES",
            "body": "네이밍 컨벤션을 맞춰주세요",
            "commitSha": "abc123def456",
            "reviewComments": [
                {
                    "userName": "reviewer1",
                    "path": "UserService.js",
                    "body": "클래스명은 PascalCase를 사용해주세요",
                    "position": 1
                }
            ]
        }
    ],
    "descriptions": [
        {
            "userName": "developer1",
            "path": "UserService.js", 
            "body": "사용자 관리를 위한 서비스 클래스입니다.",
            "position": null
        }
    ]
}